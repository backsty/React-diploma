import { apiClient } from '@/shared/lib/api';
import type { Product, ProductPreview, ProductsQuery } from '../model/types';

export const getProduct = async (id: number): Promise<Product> => {
  try {
    // eslint-disable-next-line no-console
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä —Å ID:', id);
    
    const product = await apiClient.get<Product>(`/api/items/${id}`);
    
    if (!product || typeof product.id !== 'number') {
      throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞');
    }
    
    if (!product.title || !Array.isArray(product.images)) {
      throw new Error('–¢–æ–≤–∞—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
    
    if (!Array.isArray(product.sizes)) {
      console.warn('‚ö†Ô∏è –¢–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤:', product.title);
      product.sizes = [];
    } else {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
      product.sizes = product.sizes.map(size => ({
        size: String(size.size || size),
        available: Boolean(size.available !== false)
      }));
    }

    // eslint-disable-next-line no-console
    console.log(`üìè –†–∞–∑–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–∞ "${product.title}":`, {
      total: product.sizes.length,
      available: product.sizes.filter(s => s.available).length,
      sizes: product.sizes
    });
    
    return product;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('404')) {
        throw new Error(`–¢–æ–≤–∞—Ä —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä: ${error.message}`);
    }
    
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞');
  }
};

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
export const getProducts = async (params: ProductsQuery = {}): Promise<ProductPreview[]> => {
  try {
    const searchParams = new URLSearchParams();
    
    if (params.categoryId && params.categoryId > 0) {
      searchParams.append('categoryId', params.categoryId.toString());
    }
    
    if (params.q?.trim()) {
      searchParams.append('q', params.q.trim());
    }
    
    if (params.offset && params.offset > 0) {
      searchParams.append('offset', params.offset.toString());
    }
    
    const query = searchParams.toString();
    const endpoint = query ? `/api/items?${query}` : '/api/items';
    
    const products = await apiClient.get<ProductPreview[]>(endpoint);
    
    if (!Array.isArray(products)) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
    }
    
    const validProducts = products.filter((product): product is ProductPreview => {
      return (
        typeof product === 'object' &&
        product !== null &&
        typeof product.id === 'number' &&
        typeof product.title === 'string' &&
        typeof product.price === 'number' &&
        Array.isArray(product.images) &&
        product.title.trim().length > 0 &&
        product.price > 0
      );
    });
    
    return validProducts;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    
    if (error instanceof Error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã: ${error.message}`);
    }
    
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
  }
};

export const getTopSales = async (): Promise<ProductPreview[]> => {
  try {
    const topSales = await apiClient.get<ProductPreview[]>('/api/top-sales');
    
    if (!Array.isArray(topSales)) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø –ø—Ä–æ–¥–∞–∂');
    }
    
    const validTopSales = topSales.filter((product): product is ProductPreview => {
      return (
        typeof product === 'object' &&
        product !== null &&
        typeof product.id === 'number' &&
        typeof product.title === 'string' &&
        typeof product.price === 'number' &&
        Array.isArray(product.images) &&
        product.title.trim().length > 0 &&
        product.price > 0
      );
    });
    
    return validTopSales;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø –ø—Ä–æ–¥–∞–∂:', error);
    
    if (error instanceof Error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø –ø—Ä–æ–¥–∞–∂: ${error.message}`);
    }
    
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–ø –ø—Ä–æ–¥–∞–∂');
  }
};

export const searchProducts = async (
  query: string, 
  categoryId?: number
): Promise<ProductPreview[]> => {
  const searchQuery: ProductsQuery = {
    q: query.trim(),
    offset: 0
  };
  
  if (categoryId && categoryId > 0) {
    searchQuery.categoryId = categoryId;
  }
  
  return getProducts(searchQuery);
};

export const loadMoreProducts = async (
  currentQuery: ProductsQuery,
  currentOffset: number
): Promise<ProductPreview[]> => {
  return getProducts({
    ...currentQuery,
    offset: currentOffset
  });
};

export const checkProductExists = async (id: number): Promise<boolean> => {
  try {
    await getProduct(id);
    return true;
  } catch {
    return false;
  }
};