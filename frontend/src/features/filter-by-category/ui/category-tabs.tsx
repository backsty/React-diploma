import { useEffect, useState, useCallback } from 'react';
import { useAtom } from '@reatom/npm-react';
import { useSearchParams } from 'react-router-dom';
import { Button, Loader, ErrorMessage, EmptyState } from '@/shared/ui';
import { 
  getCategories,
  categoriesListAtom,
  setCategoriesLoadingAction,
  setCategoriesDataAction,
  setCategoriesErrorAction,
  ALL_CATEGORIES_ID
} from '@/entities/category';
import {
  categoryFilterSelector,
  selectedCategoryIdAtom,
  categoryFilterLoadingAtom,
  categoryFilterErrorAtom,
  canLoadMoreAtom,
  categoryFilterStatsAtom,
  filteredProductsAtom,
  setSelectedCategoryAction,
  filterProductsByCategoryAction,
  loadMoreProductsAction,
  resetCategoryFilterAction,
  getCategoryFilterText,
  validateCategoryFilter
} from '../model/category-filter';
import { ctx } from '@/shared/store';
import type { Category } from '@/entities/category';
import type { Product } from '@/entities/product';

export interface CategoryTabsProps {
  className?: string;
  onCategoryChange?: ((categoryId: number, category: Category | null) => void) | undefined;
  onProductsFiltered?: ((products: Product[], categoryId: number) => void) | undefined;
  searchQuery?: string;
  showLoadMore?: boolean;
  showStats?: boolean;
}

export const CategoryTabs = ({
  className = '',
  onCategoryChange,
  onProductsFiltered,
  searchQuery = '',
  showLoadMore = true,
  showStats = true
}: CategoryTabsProps) => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [categoriesState] = useAtom(categoriesListAtom);
  const [selectedCategoryId] = useAtom(selectedCategoryIdAtom);
  const [isFilterLoading] = useAtom(categoryFilterLoadingAtom);
  const [filterError] = useAtom(categoryFilterErrorAtom);
  const [canLoadMore] = useAtom(canLoadMoreAtom);
  const [filterStats] = useAtom(categoryFilterStatsAtom);
  const [filteredProducts] = useAtom(filteredProductsAtom);
  const [_filterState] = useAtom(categoryFilterSelector);
  
  const [isInitialized, setIsInitialized] = useState(false);
  
  // –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å useCallback
  const handleCategorySelect = useCallback(async (categoryId: number, keepUrl: boolean = false) => {
    const validation = validateCategoryFilter(categoryId);
    if (!validation.isValid) {
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!keepUrl) {
      const newSearchParams = new URLSearchParams(searchParams);
      if (categoryId === ALL_CATEGORIES_ID) {
        newSearchParams.delete('categoryId');
      } else {
        newSearchParams.set('categoryId', String(categoryId));
      }
      setSearchParams(newSearchParams);
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    const result = await filterProductsByCategoryAction(ctx, {
      categoryId,
      searchQuery: searchQuery || undefined,
      resetResults: true
    });
    
    if (result.success) {
      // –ù–∞—Ö–æ–¥–∏–º –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const category = categoriesState.items.find(cat => cat.id === categoryId) || null;
      
      // –í—ã–∑—ã–≤–∞–µ–º callback'–∏
      if (onCategoryChange) {
        onCategoryChange(categoryId, category);
      }
      
      if (onProductsFiltered && result.products) {
        onProductsFiltered(result.products, categoryId);
      }
    }
  }, [searchParams, setSearchParams, searchQuery, categoriesState.items, onCategoryChange, onProductsFiltered]);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initializeCategories = async () => {
      if (categoriesState.items.length === 0 && !categoriesState.isLoading) {
        try {
          setCategoriesLoadingAction(ctx, true);
          const categories = await getCategories();
          setCategoriesDataAction(ctx, categories);
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π';
          setCategoriesErrorAction(ctx, errorMessage);
        }
      }
      setIsInitialized(true);
    };
    
    initializeCategories();
  }, [categoriesState.items.length, categoriesState.isLoading]);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  useEffect(() => {
    if (!isInitialized || categoriesState.items.length === 0) return;
    
    const categoryIdFromUrl = searchParams.get('categoryId');
    if (categoryIdFromUrl) {
      const categoryId = parseInt(categoryIdFromUrl, 10);
      const validation = validateCategoryFilter(categoryId);
      
      if (validation.isValid && categoryId !== selectedCategoryId) {
        handleCategorySelect(categoryId);
      }
    } else if (selectedCategoryId === ALL_CATEGORIES_ID) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í—Å–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      handleCategorySelect(ALL_CATEGORIES_ID);
    }
  }, [isInitialized, categoriesState.items, searchParams, selectedCategoryId, handleCategorySelect]);
  
  // –ü–µ—Ä–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    if (isInitialized && selectedCategoryId !== null) {
      handleCategorySelect(selectedCategoryId, true);
    }
  }, [searchQuery, isInitialized, selectedCategoryId, handleCategorySelect]);
  
  const handleLoadMore = async () => {
    if (!canLoadMore) return;
    
    const result = await loadMoreProductsAction(ctx, searchQuery || undefined);
    
    if (result.success && onProductsFiltered && result.products) {
      onProductsFiltered([...filteredProducts, ...result.products], selectedCategoryId);
    }
  };
  
  const handleReset = () => {
    resetCategoryFilterAction(ctx);
    setSearchParams({});
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  if (categoriesState.isLoading) {
    return (
      <div className={`category-tabs-loading ${className}`}>
        <Loader text="–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π..." />
      </div>
    );
  }
  
  if (categoriesState.error) {
    return (
      <div className={`category-tabs-error ${className}`}>
        <ErrorMessage 
          message={categoriesState.error} 
          onRetry={() => window.location.reload()}
        />
      </div>
    );
  }
  
  if (categoriesState.items.length === 0) {
    return (
      <div className={`category-tabs-empty ${className}`}>
        <EmptyState
          title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          description="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
          action={{
            label: '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É',
            onClick: () => window.location.reload()
          }}
        />
      </div>
    );
  }
  
  return (
    <div className={`category-tabs ${className}`}>
      {/* –¢–∞–±—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <ul className="nav nav-tabs catalog-categories nav-fill" role="tablist">
        {categoriesState.items.map((category) => (
          <li key={category.id} className="nav-item">
            <button
              className={`nav-link ${selectedCategoryId === category.id ? 'active' : ''}`}
              type="button"
              role="tab"
              aria-selected={selectedCategoryId === category.id}
              onClick={() => handleCategorySelect(category.id)}
              disabled={isFilterLoading}
              title={category.title}
            >
              {category.title}
              
              {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
              {isFilterLoading && selectedCategoryId === category.id && (
                <span className="ms-1">
                  <Loader size="sm" />
                </span>
              )}
            </button>
          </li>
        ))}
      </ul>
      
      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="tab-content mt-3">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
        {showStats && (
          <div className="category-filter-stats mb-3">
            <div className="d-flex justify-content-between align-items-center">
              <small className="text-muted">
                {getCategoryFilterText(
                  selectedCategoryId, 
                  categoriesState.items
                )}
                {filterStats.hasResults && (
                  <span> ‚Äî {filterStats.loadedCount} —Ç–æ–≤–∞—Ä–æ–≤</span>
                )}
              </small>
              
              {selectedCategoryId !== ALL_CATEGORIES_ID && (
                <Button
                  variant="link"
                  size="sm"
                  onClick={handleReset}
                  className="p-0"
                >
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                </Button>
              )}
            </div>
          </div>
        )}
        
        {/* –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
        {filterError && (
          <div className="mb-3">
            <ErrorMessage 
              message={filterError}
              onRetry={() => handleCategorySelect(selectedCategoryId)}
            />
          </div>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {isFilterLoading && filteredProducts.length === 0 && (
          <div className="text-center py-4">
            <Loader text="–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤..." />
          </div>
        )}
        
        {/* –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
        {!isFilterLoading && filterStats.isEmpty && !filterError && (
          <EmptyState
            icon="üì¶"
            title="–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            description={`–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${getCategoryFilterText(selectedCategoryId, categoriesState.items)}" –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤`}
            action={{
              label: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã',
              onClick: () => handleCategorySelect(ALL_CATEGORIES_ID)
            }}
          />
        )}
        
        {/* –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë" */}
        {showLoadMore && canLoadMore && (
          <div className="text-center mt-4">
            <Button
              variant="outline"
              onClick={handleLoadMore}
              disabled={isFilterLoading}
              loading={isFilterLoading && filteredProducts.length > 0}
            >
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë
            </Button>
          </div>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ */}
        {!filterStats.hasMore && filterStats.hasResults && (
          <div className="text-center text-muted mt-3">
            <small>–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã</small>
          </div>
        )}
      </div>
    </div>
  );
};

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–±–æ–≤ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
export interface SimpleCategoryTabsProps {
  className?: string;
  onCategoryChange?: ((categoryId: number) => void) | undefined;
  disabled?: boolean;
}

export const SimpleCategoryTabs = ({
  className = '',
  onCategoryChange,
  disabled = false
}: SimpleCategoryTabsProps) => {
  const [categoriesState] = useAtom(categoriesListAtom);
  const [selectedCategoryId] = useAtom(selectedCategoryIdAtom);
  
  const handleCategoryClick = (categoryId: number) => {
    if (disabled) return;
    
    setSelectedCategoryAction(ctx, categoryId);
    
    if (onCategoryChange) {
      onCategoryChange(categoryId);
    }
  };
  
  if (categoriesState.items.length === 0) {
    return null;
  }
  
  return (
    <ul className={`nav nav-tabs ${className}`} role="tablist">
      {categoriesState.items.map((category) => (
        <li key={category.id} className="nav-item">
          <button
            className={`nav-link ${selectedCategoryId === category.id ? 'active' : ''}`}
            type="button"
            onClick={() => handleCategoryClick(category.id)}
            disabled={disabled}
          >
            {category.title}
          </button>
        </li>
      ))}
    </ul>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–æ–∏—Å–∫–æ–º
export interface CategoryTabsWithSearchProps extends CategoryTabsProps {
  searchQuery: string;
  _onSearchChange?: ((query: string) => void) | undefined;
}

export const CategoryTabsWithSearch = ({
  searchQuery,
  _onSearchChange, // –Ø–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π
  ...props
}: CategoryTabsWithSearchProps) => {
  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const handleCategoryChange = (categoryId: number, category: Category | null) => {
    if (props.onCategoryChange) {
      props.onCategoryChange(categoryId, category);
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    // if (_onSearchChange && searchQuery) {
    //   _onSearchChange('');
    // }
  };
  
  return (
    <CategoryTabs
      {...props}
      searchQuery={searchQuery}
      onCategoryChange={handleCategoryChange}
    />
  );
};