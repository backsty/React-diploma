import { apiClient } from '@/shared/lib/api';
import type { ProductPreview } from '@/entities/product';

export interface GetItemsParams {
  categoryId?: number | null;
  q?: string;
  offset?: number;
  limit?: number;
}

interface ApiProductItem {
  id: unknown;
  title: unknown;
  price: unknown;
  images: unknown;
  category?: unknown;
}

const isValidProductPreview = (item: ApiProductItem): item is ProductPreview => {
  return (
    typeof item === 'object' &&
    item !== null &&
    typeof item.id === 'number' &&
    typeof item.title === 'string' &&
    typeof item.price === 'number' &&
    Array.isArray(item.images)
  );
};

export const getItems = async (params: GetItemsParams = {}): Promise<ProductPreview[]> => {
  try {
    const searchParams = new URLSearchParams();
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–µ—Å–ª–∏ –Ω–µ "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    if (params.categoryId && params.categoryId > 0) {
      searchParams.append('categoryId', params.categoryId.toString());
    }
    
    // –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if (params.q && params.q.trim()) {
      searchParams.append('q', params.q.trim());
    }
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if (params.offset && params.offset > 0) {
      searchParams.append('offset', params.offset.toString());
    }
    
    if (params.limit) {
      searchParams.append('limit', params.limit.toString());
    }
    
    const url = `/api/items${searchParams.toString() ? `?${searchParams.toString()}` : ''}`;

    if (process.env.NODE_ENV === 'development') {
      console.warn('üåê API –∑–∞–ø—Ä–æ—Å:', url);
      console.warn('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:', params);
    }
    
    const response = await apiClient.get<ProductPreview[]>(url);
    
    if (!Array.isArray(response)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    let filteredItems = response;
    
    if (params.q && params.q.trim()) {
      const searchTerm = params.q.trim().toLowerCase();
      filteredItems = response.filter((item: ProductPreview) => {
        return item.title.toLowerCase().includes(searchTerm);
      });
    }

    const validItems = filteredItems.filter((item: ApiProductItem): item is ProductPreview => {
      return isValidProductPreview(item);
    });

    if (process.env.NODE_ENV === 'development') {
      console.warn('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã:', validItems.length);
    }
    
    return validItems;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:', error);
    
    if (error instanceof Error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã: ${error.message}`);
    }
    
    throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
  }
};

export const loadMoreItems = async (params: GetItemsParams): Promise<ProductPreview[]> => {
  return getItems(params);
};